@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using InvestmentManager.Services.Interfaces
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using InvestmentManager.Shared.Models
@using System.Diagnostics

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<div style="display: flex; justify-content: center; align-items: center; height: 100vh; background: linear-gradient(135deg, #1A237E 0%, #0D47A1 100%);">
	<MudPaper Elevation="4" Class="login-container">

		<StatusMessage Message="@errorMessage" />

		<EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
			<DataAnnotationsValidator />

			<MudStaticTextField For="@(() => Input.Email)"
								@bind-Value="Input.Email"
								Placeholder="email@email.com"
								Variant="Variant.Outlined"
								FullWidth="true"
								Margin="Margin.Dense"
								Adornment="Adornment.Start"
								AdornmentIcon="@Icons.Material.Filled.Email"
								Class="mb-4" />

			<MudStaticTextField For="@(() => Input.Password)"
								@bind-Value="Input.Password"
								InputType="InputType.Password"
								Placeholder="Senha"
								Variant="Variant.Outlined"
								FullWidth="true"
								Margin="Margin.Dense"
								Adornment="Adornment.Start"
								AdornmentIcon="@Icons.Material.Filled.Lock" />

			<MudStaticCheckBox For="@(() => Input.RememberMe)" @bind-Value="Input.RememberMe">
				Lembrar-me?
			</MudStaticCheckBox>

			<MudStaticButton Variant="Variant.Filled"
							 FullWidth="true"
							 Type="submit"
							 Class="mt-2"
							 Style="background-color: #1976D2; color: white;">
				Entrar
			</MudStaticButton>


		</EditForm>

		<MudText Typo="Typo.body2" Align="Align.Center" Class="mt-3">
			<MudLink Href="Account/ForgotPassword">Esqueceu sua senha?</MudLink>
		</MudText>

		<MudDivider Class="my-3" />

		<MudText Typo="Typo.body2" Align="Align.Center">
			<MudLink Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
				Criar conta
			</MudLink>
		</MudText>
	</MudPaper>
</div>


<style>
	.login-container {
		padding: 24px;
		width: 100%;
		max-width: 400px;
		background-color: white;
		border-radius: 8px;
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
	}

	.mt-2 {
		margin-top: 16px;
	}

	.mt-3 {
		margin-top: 24px;
	}

	.my-3 {
		margin: 24px 0;
	}
</style>


@code {
	private string? errorMessage;

	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;

	[SupplyParameterFromForm]
	private InputModel Input { get; set; } = new();

	[SupplyParameterFromQuery]
	private string? ReturnUrl { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (HttpMethods.IsGet(HttpContext.Request.Method))
		{
			// Clear the existing external cookie to ensure a clean login process
			await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
		}
	}

	public async Task LoginUser()
	{
		Stopwatch stopwatch = new Stopwatch();//TODO REMOVER ESSE STOPWATCH QUANDO TERMINAR DE VERO TEMPO
		stopwatch.Start();
		// This doesn't count login failures towards account lockout
		// To enable password failures to trigger account lockout, set lockoutOnFailure: true
		var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
		stopwatch.Stop();
		Console.WriteLine($"Login in {stopwatch.ElapsedMilliseconds} ms.");
		if (result.Succeeded)
		{
			RedirectManager.RedirectTo("news");
		}
		else if (result.RequiresTwoFactor)
		{
			RedirectManager.RedirectTo(
				"Account/LoginWith2fa",
				new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
		}
		else if (result.IsLockedOut)
		{
			Logger.LogWarning("User account locked out.");
			RedirectManager.RedirectTo("Account/Lockout");
		}
		else
		{
			errorMessage = "Error: Invalid login attempt.";
		}

	}

	private sealed class InputModel
	{
		[Required(ErrorMessage = "O email é obrigatório.")]
		[EmailAddress]
		public string Email { get; set; } = "";

		[Required(ErrorMessage = "A senha é obrigatória.")]
		[DataType(DataType.Password)]
		public string Password { get; set; } = "";

		[Display(Name = "Lembrar-me?")]
		public bool RememberMe { get; set; }
	}
}
