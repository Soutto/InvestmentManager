@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using InvestmentManager.Components.Pages.Footer
@using InvestmentManager.Shared.Attributes
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using InvestmentManager.Shared.Models
@using System.Text.RegularExpressions

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<div style="display: flex; justify-content: center; align-items: center; height: 100vh; background: linear-gradient(135deg, #1A237E 0%, #0D47A1 100%);">

	<MudPaper Elevation="4" Class="register-container">

		<StatusMessage Message="@Message" />

		<EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">

			<DataAnnotationsValidator />

			<!-- Campo de Email -->
			<MudStaticTextField For="@(() => Input.Email)"
								@bind-Value="Input.Email"
								Placeholder="email@email.com"
								Variant="Variant.Outlined"
								FullWidth="true"
								Margin="Margin.Dense"
								Adornment="Adornment.Start"
								AdornmentIcon="@Icons.Material.Filled.Email"
								UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } })"
								Class="mb-4" />

			<!-- Campo de Senha -->
			<MudStaticTextField For="@(() => Input.Password)"
								@bind-Value="Input.Password"
								InputType="InputType.Password"
								Placeholder="Senha"
								Variant="Variant.Outlined"
								FullWidth="true"
								Margin="Margin.Dense"
								Adornment="Adornment.Start"
								AdornmentIcon="@Icons.Material.Filled.Lock"	
								Class="mb-4" />

			<!-- Campo de Confirmar Senha -->
			<MudStaticTextField For="@(() => Input.ConfirmPassword)"
								@bind-Value="Input.ConfirmPassword"
								InputType="InputType.Password"
								Placeholder="Confirmar"
								Variant="Variant.Outlined"
								FullWidth="true"
								Margin="Margin.Dense"
								Adornment="Adornment.Start"
								AdornmentIcon="@Icons.Material.Filled.Lock"
								Class="mb-4" />
			<div Class="mb-8" style="display: flex; align-items: center;">
				<span style="margin-left: 8px;">
					Ao criar sua conta você estará aceitando os nossos termos de uso e
					<MudLink Color="Color.Info" href="/account/termsofuse" target="_blank">termos de uso</MudLink> e a
					<MudLink Color="Color.Info" href="/account/privacypolicy" target="_blank" >política de privacidade</MudLink>.
				</span>
			</div>
			<!-- Botão de Criar Conta -->
			<MudStaticButton Variant="Variant.Filled"
							 FullWidth="true"
							 Type="submit"
							 Class="mt-2"
							 Color="Color.Info">
				Criar conta
			</MudStaticButton>
		</EditForm>
	</MudPaper>
</div>

<style>
	.register-container {
		padding: 24px;
		width: 100%;
		max-width: 400px;
		background-color: white;
		border-radius: 8px;
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
	}

	.mt-2 {
		margin-top: 16px;
	}
</style>

@code {
	private IEnumerable<IdentityError>? identityErrors;

	[SupplyParameterFromForm]
	private InputModel Input { get; set; } = new();

	[SupplyParameterFromQuery]
	private string? ReturnUrl { get; set; }

	private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

	public async Task RegisterUser(EditContext editContext)
	{
		var user = CreateUser();

		await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
		var emailStore = GetEmailStore();
		await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
		var result = await UserManager.CreateAsync(user, Input.Password);

		if (!result.Succeeded)
		{
			identityErrors = result.Errors;
			return;
		}

		Logger.LogInformation("User created a new account with password.");

		var userId = await UserManager.GetUserIdAsync(user);
		var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
		code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
		var callbackUrl = NavigationManager.GetUriWithQueryParameters(
			NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
			new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

		await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

		if (UserManager.Options.SignIn.RequireConfirmedAccount)
		{
			RedirectManager.RedirectTo(
				"Account/RegisterConfirmation",
				new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
		}

		await SignInManager.SignInAsync(user, isPersistent: false);
		RedirectManager.RedirectTo(ReturnUrl);
	}

	private ApplicationUser CreateUser()
	{
		try
		{
			return Activator.CreateInstance<ApplicationUser>();
		}
		catch
		{
			throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
				$"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
		}
	}

	private IUserEmailStore<ApplicationUser> GetEmailStore()
	{
		if (!UserManager.SupportsUserEmail)
		{
			throw new NotSupportedException("The default UI requires a user store with email support.");
		}
		return (IUserEmailStore<ApplicationUser>)UserStore;
	}

	private sealed class InputModel
	{
		[Required(ErrorMessage = "Digite um e-mail")]
		[EmailAddress]
		[Display(Name = "Email")]
		public string Email { get; set; } = "";

		[Required(ErrorMessage = "Digite uma senha")]
		[StrongPassword]
		[DataType(DataType.Password)]
		[Display(Name = "Password")]
		public string Password { get; set; } = "";

		[DataType(DataType.Password)]
		[Display(Name = "Confirm password")]
		[Compare("Password", ErrorMessage = "As senhas não são iguais. Tente novamente.")]
		public string ConfirmPassword { get; set; } = "";
	}
}
