@using System.Net.Http.Json
@using InvestmentManager.Models
@using InvestmentManager.Services.Interfaces
@using MudBlazor
@using Microsoft.AspNetCore.Authorization
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject ITransactionService _transactionService
@page "/transactions"
@attribute [Authorize]
<PageTitle>Transações</PageTitle>
<MudTable Items="@filteredTransactions" Loading="@isLoading" Dense="false" Hover="true" ReadOnly="false" CanCancelEdit="true"
          Filter="new Func<Transaction,bool>(FilterFunc)" @bind-SelectedItem="selectedItem1" SortLabel="Sort By"
          CommitEditTooltip="Commit Edit" OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))"
          RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" RowEditCommit="ItemHasBeenCommitted"
          IsEditRowSwitchingBlocked="true" ApplyButtonPosition="TableApplyButtonPosition.End"
          EditTrigger="TableEditTrigger.RowClick">
       <ToolBarContent>
            <MudSelect T="string" Label="Tipo de Transação" @bind-Value="selectedTransactionType" Variant="Variant.Outlined">
                <MudSelectItem Value="@All">Todos</MudSelectItem>
                <MudSelectItem Value="@Purchase">Compras</MudSelectItem>
                <MudSelectItem Value="@Sale">Vendas</MudSelectItem>
            </MudSelect>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Pesquisar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Transaction, object>(x=>x.TransactionDate)">Data</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Transaction, object>(x=>x.Ticker)">Código</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Transaction, object>(x=>x.PricePerShare)">Preço R$</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Transaction, object>(x=>x.IsBuy)">Compra/Venda</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Data">@context.TransactionDate</MudTd>
        <MudTd DataLabel="Código">@context.Ticker</MudTd>
        <MudTd DataLabel="Preço R$">@context.PricePerShare</MudTd>
        <MudTd DataLabel="Tipo">
            @if (context.IsBuy)
            {
                <MudChip T="string" Color="Color.Success" Variant="Variant.Filled" Size="Size.Small" Icon="@Icons.Material.Filled.ArrowUpward">
                    Compra
                </MudChip>
            }
            else
            {
                <MudChip T="string" Color="Color.Error" Variant="Variant.Filled" Size="Size.Small" Icon="@Icons.Material.Filled.ArrowDownward">
                    Venda
                </MudChip>
            }
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Data">@context.TransactionDate</MudTd>
        <MudTd DataLabel="Código">
            <MudTextField @bind-Value="context.Ticker" Required />
        </MudTd>
        <MudTd DataLabel="Preço">
            <MudNumericField @bind-Value="context.PricePerShare" Required Min="1" />
        </MudTd>
                <MudTd DataLabel="Tipo">
            @if (context.IsBuy)
            {
                <MudChip T="string" Color="Color.Success" Variant="Variant.Filled" Size="Size.Small" Icon="@Icons.Material.Filled.ArrowUpward">
                    Compra
                </MudChip>
            }
            else
            {
                <MudChip T="string" Color="Color.Error" Variant="Variant.Filled" Size="Size.Small" Icon="@Icons.Material.Filled.ArrowDownward">
                    Venda
                </MudChip>
            }
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
    </EditButtonContent>
</MudTable>

<MudText HtmlTag="span">Selected1: @selectedItem1?.Ticker</MudText>
<MudExpansionPanels Style="flex: 1;">
    <MudExpansionPanel Text="Show inline-edit event log">
        @foreach (var message in editEvents)
        {
            <MudText>@message</MudText>
        }
        @if (editEvents.Count > 0)
        {
            <div class="d-flex">
                <MudSpacer />
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="ClearEventLog">Clear event log</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>
@code {
    private List<string> editEvents = new();
    private string searchString = "";
    private Transaction selectedItem1 = null;
    private Transaction elementBeforeEdit;
    private IEnumerable<Transaction> transactionList = new List<Transaction>();
    private bool isLoading = true;

    private const string All = "All";
    private const string Purchase = "Purchase";
    private const string Sale = "Sale";
    private string selectedTransactionType = "All";
    private IEnumerable<Transaction> filteredTransactions => transactionList.Where(FilterFunc);

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);
        string? userId = await GetUserIdAsync();
        if (!string.IsNullOrEmpty(userId))
        {
            transactionList = await _transactionService.GetAllByUserIdAsync(userId);
        }
        isLoading = false;
    }
    private void ClearEventLog()
    {
        editEvents.Clear();
    }
    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }
    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
            {
                TransactionDate = ((Transaction)element).TransactionDate,
                Ticker = ((Transaction)element).Ticker,
                PricePerShare = ((Transaction)element).PricePerShare,
            };
        AddEditionEvent($"RowEditPreview event: made a backup of Element {((Transaction)element).Ticker}");
    }
    private void ItemHasBeenCommitted(object element)
    {
        AddEditionEvent($"RowEditCommit event: Changes to Element {((Transaction)element).Ticker} committed");
    }
    private void ResetItemToOriginalValues(object element)
    {
        ((Transaction)element).TransactionDate = elementBeforeEdit.TransactionDate;
        ((Transaction)element).Ticker = elementBeforeEdit.Ticker;
        ((Transaction)element).PricePerShare = elementBeforeEdit.PricePerShare;
        AddEditionEvent($"RowEditCancel event: Editing of Element {((Transaction)element).Ticker} canceled");
    }
    private bool FilterFunc(Transaction element)
    {
                // Filter by search string
        bool matchesSearch = string.IsNullOrWhiteSpace(searchString) ||
                             element.Ticker.Contains(searchString, StringComparison.OrdinalIgnoreCase);

    // Filtra por tipo de transação
    bool matchesType = selectedTransactionType == All ||
                       (selectedTransactionType == Purchase && element.IsBuy) ||
                       (selectedTransactionType == Sale && !element.IsBuy);

    return matchesSearch && matchesType;


        /*if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Ticker.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;*/
    }
    private async Task<string?> GetUserIdAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        if (authstate.User.Identity != null && authstate.User.Identity.IsAuthenticated)
        {
            return authstate.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        }
        return string.Empty;
    }
}