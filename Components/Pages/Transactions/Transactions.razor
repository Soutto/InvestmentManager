@using System.Net.Http.Json
@using InvestmentManager.Models
@using InvestmentManager.Services.Interfaces
@using MudBlazor
@using Microsoft.AspNetCore.Authorization

@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject ITransactionService _transactionService

@page "/transactions"

@attribute [Authorize]

<PageTitle>Transações</PageTitle>

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5">Transações</MudText>
    <MudTable Items="@filteredTransactions" Loading="@isLoading" Dense="false" Hover="true" ReadOnly="false"
              Filter="new Func<Transaction, bool>(FilterFunc)" @bind-SelectedItem="selectedItem" SortLabel="Ordenar por"
              RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" RowEditCommit="ItemHasBeenCommitted"
              IsEditRowSwitchingBlocked="true" ApplyButtonPosition="TableApplyButtonPosition.End"
              EditTrigger="TableEditTrigger.RowClick">
        <ToolBarContent>
            <MudSelect T="string" Label="Tipo de Transação" @bind-Value="selectedTransactionType" Variant="Variant.Outlined">
                <MudSelectItem Value="All">Todos</MudSelectItem>
                <MudSelectItem Value="Purchase">Compras</MudSelectItem>
                <MudSelectItem Value="Sale">Vendas</MudSelectItem>
            </MudSelect>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Pesquisar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Transaction, object>(x => x.TransactionDate)">Data Transação</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Transaction, object>(x => x.IsBuy)">Tipo</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Transaction, object>(x => x.Ticker)">Código do Ativo</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Transaction, object>(x => x.PricePerShare)">Preço por Ativo</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Data Transação">@context.TransactionDate.ToString("dd/MM/yyyy")</MudTd>
            <MudTd DataLabel="Tipo">
                @if (context.IsBuy)
                {
                    <MudChip T="string" Color="Color.Success" Variant="Variant.Filled">Compra</MudChip>
                }
                else
                {
                    <MudChip T="string" Color="Color.Error" Variant="Variant.Filled">Venda</MudChip>
                }
            </MudTd>
            <MudTd DataLabel="Código do Ativo">@context.Ticker</MudTd>
            <MudTd DataLabel="Preço por Ativo">@context.PricePerShare</MudTd>
        </RowTemplate>
        <RowEditingTemplate>
            <MudTd DataLabel="Data Transação">
                <MudDatePicker @bind-Date="context.TransactionDate" Required="true" />
            </MudTd>
            <MudTd DataLabel="Tipo">
                <MudSelect T="bool" @bind-Value="context.IsBuy" Required="true">
                    <MudSelectItem Value="true">Compra</MudSelectItem>
                    <MudSelectItem Value="false">Venda</MudSelectItem>
                </MudSelect>
            </MudTd>
            <MudTd DataLabel="Código do Ativo">
                <MudTextField @bind-Value="context.Ticker" Required="true" />
            </MudTd>
            <MudTd DataLabel="Preço por Ativo">
                <MudNumericField @bind-Value="context.PricePerShare" Required="true" Min="0" />
            </MudTd>
        </RowEditingTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    <MudText HtmlTag="span">Selecionado: @selectedItem?.Ticker</MudText>

    <MudExpansionPanels Style="flex: 1;">
        <MudExpansionPanel Text="Mostrar log de edição">
            @foreach (var message in editEvents)
            {
                <MudText>@message</MudText>
            }
            @if (editEvents.Count > 0)
            {
                <div class="d-flex">
                    <MudSpacer />
                    <MudButton Class="mt-3" Variant="Variant.Filled" OnClick="ClearEventLog">Limpar log</MudButton>
                </div>
            }
        </MudExpansionPanel>
    </MudExpansionPanels>
</MudPaper>

@code {
    private IEnumerable<Transaction> Transactionss = new List<Transaction>();
    private IEnumerable<Transaction> filteredTransactions => Transactionss.Where(FilterFunc);

    private List<string> editEvents = new();
    private string searchString = "";
    private string selectedTransactionType = "All";
    private Transaction? selectedItem = null;
    private Transaction? elementBeforeEdit = null;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        string? userId = await GetUserIdAsync();
        if (!string.IsNullOrEmpty(userId))
        {
            Transactionss = await _transactionService.GetAllByUserIdAsync(userId);
        }
        isLoading = false;
    }

    private bool FilterFunc(Transaction element)
    {
        bool matchesSearch = string.IsNullOrWhiteSpace(searchString) ||
                             element.Ticker.Contains(searchString, StringComparison.OrdinalIgnoreCase);

        bool matchesType = selectedTransactionType == "All" ||
                           (selectedTransactionType == "Purchase" && element.IsBuy) ||
                           (selectedTransactionType == "Sale" && !element.IsBuy);

        return matchesSearch && matchesType;
    }

    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(Transaction element)
    {
        elementBeforeEdit = new Transaction
        {
            TransactionDate = element.TransactionDate,
            Ticker = element.Ticker,
            PricePerShare = element.PricePerShare,
            IsBuy = element.IsBuy,
            // Add other properties as needed
        };
        AddEditionEvent($"Backup realizado para o ativo {element.Ticker}");
    }

    private void ResetItemToOriginalValues(Transaction element)
    {
        if (elementBeforeEdit != null)
        {
            element.TransactionDate = elementBeforeEdit.TransactionDate;
            element.Ticker = elementBeforeEdit.Ticker;
            element.PricePerShare = elementBeforeEdit.PricePerShare;
            element.IsBuy = elementBeforeEdit.IsBuy;
            AddEditionEvent($"Edição cancelada para o ativo {element.Ticker}");
        }
    }

    private void ItemHasBeenCommitted(Transaction element)
    {
        AddEditionEvent($"Alterações confirmadas para o ativo {element.Ticker}");
        // Save changes to the database or data source
    }

    private async Task<string?> GetUserIdAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        if (authstate.User.Identity != null && authstate.User.Identity.IsAuthenticated)
        {
            return authstate.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        }
        return null;
    }
}
